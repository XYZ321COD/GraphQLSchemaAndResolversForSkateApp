scalar DateTime

type User {
  UserID: ID!
  Login: String!
  Password: String!
  Phone: String!
  Mail: String!
  Comments: [Comment!]
  Likes: [Like!]
  createdAt: DateTime!
}

type Location {
  LocationID: ID!
  Name: String!
  Description: String!
  Medias: [String]!
  Rates: [Float!]
  Adress: String!
  Comments: [Comment!]
  createdAt: DateTime!
}

type Comment {
  CommentID: ID!
  User: User!
  authorId: ID!
  locationId: ID!
  Location: Location!
  Context: String!
  Likes: [Like!]
  Medias: [String]!
  createdAt: DateTime!
}

type Like {
  LikeID: ID!
  authorId: ID!
  commentId: ID!
  locationId: ID!
  Type: String!
}

type Mutation {
  signup(register: RegisterInput!): AuthPayload
  login(login: LoginInput!): AuthPayload
  changePassword(Password: String!): AuthPayload
  createComment(comment: CommentInput!): Comment!
  deleteComment(CommentID: ID!): String
  createLocation(location: LocationInput!): Location!
  deleteLocation(LocationID: ID!): String!
  rateLocation(Rate: Rate!): String!
  likeComment(LikeInput: LikeInput!): Like!
  unlikeComment(LikeID: ID!): String
}

type Query {
  getRates(LocationID: ID!): [Float!]
  getComment(CommentID: ID!): Comment
  getLocation(LocationID: ID!): Location
  getLocationByName(Name: String!): Location
  getUser(UserID: ID!): User
  getLike(LikeID: ID!): Like
  getLikesForComment(CommentID: ID!): [Like!]
  getLikesForUser(UserID: ID!): [Like!]
  getAllCommentsForLocation(LocationID: ID!): [Comment!]
}

type AuthPayload {
  token: String!
  user: User!
}

input RegisterInput {
  Login: String!
  Password: String!
  confirmPassword: String!
  Mail: String!
  Phone: String!
}

input LoginInput {
  Login: String!
  Password: String!
  Mail: String!
}

input CommentInput {
  Context: String!
  Medias: [String]!
  LocationID: ID!
}

input LocationInput {
  Name: String!
  Description: String!
  Medias: [String]!
  Adress: String!
}

input Rate {
  Rate: Float!
  LocationID: ID!
}

input LikeInput {
  commentId: ID!
  locationId: ID!
  Type: String!
}
