// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  like: (where?: LikeWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  like: (where: LikeWhereUniqueInput) => LikeNullablePromise;
  likes: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Like>;
  likesConnection: (args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LikeConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createLike: (data: LikeCreateInput) => LikePromise;
  updateLike: (args: {
    data: LikeUpdateInput;
    where: LikeWhereUniqueInput;
  }) => LikePromise;
  updateManyLikes: (args: {
    data: LikeUpdateManyMutationInput;
    where?: LikeWhereInput;
  }) => BatchPayloadPromise;
  upsertLike: (args: {
    where: LikeWhereUniqueInput;
    create: LikeCreateInput;
    update: LikeUpdateInput;
  }) => LikePromise;
  deleteLike: (where: LikeWhereUniqueInput) => LikePromise;
  deleteManyLikes: (where?: LikeWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  like: (
    where?: LikeSubscriptionWhereInput
  ) => LikeSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CommentOrderByInput =
  | "CommentID_ASC"
  | "CommentID_DESC"
  | "authorId_ASC"
  | "authorId_DESC"
  | "locationId_ASC"
  | "locationId_DESC"
  | "Context_ASC"
  | "Context_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type LikeOrderByInput =
  | "LikeID_ASC"
  | "LikeID_DESC"
  | "authorId_ASC"
  | "authorId_DESC"
  | "commentId_ASC"
  | "commentId_DESC"
  | "locationId_ASC"
  | "locationId_DESC"
  | "Type_ASC"
  | "Type_DESC";

export type LocationOrderByInput =
  | "LocationID_ASC"
  | "LocationID_DESC"
  | "Name_ASC"
  | "Name_DESC"
  | "Description_ASC"
  | "Description_DESC"
  | "Adress_ASC"
  | "Adress_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "UserID_ASC"
  | "UserID_DESC"
  | "Login_ASC"
  | "Login_DESC"
  | "Password_ASC"
  | "Password_DESC"
  | "Phone_ASC"
  | "Phone_DESC"
  | "Mail_ASC"
  | "Mail_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface LikeScalarWhereInput {
  LikeID?: Maybe<ID_Input>;
  LikeID_not?: Maybe<ID_Input>;
  LikeID_in?: Maybe<ID_Input[] | ID_Input>;
  LikeID_not_in?: Maybe<ID_Input[] | ID_Input>;
  LikeID_lt?: Maybe<ID_Input>;
  LikeID_lte?: Maybe<ID_Input>;
  LikeID_gt?: Maybe<ID_Input>;
  LikeID_gte?: Maybe<ID_Input>;
  LikeID_contains?: Maybe<ID_Input>;
  LikeID_not_contains?: Maybe<ID_Input>;
  LikeID_starts_with?: Maybe<ID_Input>;
  LikeID_not_starts_with?: Maybe<ID_Input>;
  LikeID_ends_with?: Maybe<ID_Input>;
  LikeID_not_ends_with?: Maybe<ID_Input>;
  authorId?: Maybe<ID_Input>;
  authorId_not?: Maybe<ID_Input>;
  authorId_in?: Maybe<ID_Input[] | ID_Input>;
  authorId_not_in?: Maybe<ID_Input[] | ID_Input>;
  authorId_lt?: Maybe<ID_Input>;
  authorId_lte?: Maybe<ID_Input>;
  authorId_gt?: Maybe<ID_Input>;
  authorId_gte?: Maybe<ID_Input>;
  authorId_contains?: Maybe<ID_Input>;
  authorId_not_contains?: Maybe<ID_Input>;
  authorId_starts_with?: Maybe<ID_Input>;
  authorId_not_starts_with?: Maybe<ID_Input>;
  authorId_ends_with?: Maybe<ID_Input>;
  authorId_not_ends_with?: Maybe<ID_Input>;
  commentId?: Maybe<ID_Input>;
  commentId_not?: Maybe<ID_Input>;
  commentId_in?: Maybe<ID_Input[] | ID_Input>;
  commentId_not_in?: Maybe<ID_Input[] | ID_Input>;
  commentId_lt?: Maybe<ID_Input>;
  commentId_lte?: Maybe<ID_Input>;
  commentId_gt?: Maybe<ID_Input>;
  commentId_gte?: Maybe<ID_Input>;
  commentId_contains?: Maybe<ID_Input>;
  commentId_not_contains?: Maybe<ID_Input>;
  commentId_starts_with?: Maybe<ID_Input>;
  commentId_not_starts_with?: Maybe<ID_Input>;
  commentId_ends_with?: Maybe<ID_Input>;
  commentId_not_ends_with?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  locationId_not?: Maybe<ID_Input>;
  locationId_in?: Maybe<ID_Input[] | ID_Input>;
  locationId_not_in?: Maybe<ID_Input[] | ID_Input>;
  locationId_lt?: Maybe<ID_Input>;
  locationId_lte?: Maybe<ID_Input>;
  locationId_gt?: Maybe<ID_Input>;
  locationId_gte?: Maybe<ID_Input>;
  locationId_contains?: Maybe<ID_Input>;
  locationId_not_contains?: Maybe<ID_Input>;
  locationId_starts_with?: Maybe<ID_Input>;
  locationId_not_starts_with?: Maybe<ID_Input>;
  locationId_ends_with?: Maybe<ID_Input>;
  locationId_not_ends_with?: Maybe<ID_Input>;
  Type?: Maybe<String>;
  Type_not?: Maybe<String>;
  Type_in?: Maybe<String[] | String>;
  Type_not_in?: Maybe<String[] | String>;
  Type_lt?: Maybe<String>;
  Type_lte?: Maybe<String>;
  Type_gt?: Maybe<String>;
  Type_gte?: Maybe<String>;
  Type_contains?: Maybe<String>;
  Type_not_contains?: Maybe<String>;
  Type_starts_with?: Maybe<String>;
  Type_not_starts_with?: Maybe<String>;
  Type_ends_with?: Maybe<String>;
  Type_not_ends_with?: Maybe<String>;
  AND?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  OR?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  NOT?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  CommentID: Maybe<ID_Input>;
}>;

export interface CommentCreateMediasInput {
  set?: Maybe<String[] | String>;
}

export interface CommentCreateManyWithoutLocationInput {
  create?: Maybe<
    CommentCreateWithoutLocationInput[] | CommentCreateWithoutLocationInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CommentUpdateMediasInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateWithoutCommentsInput {
  UserID?: Maybe<ID_Input>;
  Login: String;
  Password: String;
  Phone: String;
  Mail: String;
  Likes?: Maybe<LikeCreateManyInput>;
}

export interface CommentWhereInput {
  CommentID?: Maybe<ID_Input>;
  CommentID_not?: Maybe<ID_Input>;
  CommentID_in?: Maybe<ID_Input[] | ID_Input>;
  CommentID_not_in?: Maybe<ID_Input[] | ID_Input>;
  CommentID_lt?: Maybe<ID_Input>;
  CommentID_lte?: Maybe<ID_Input>;
  CommentID_gt?: Maybe<ID_Input>;
  CommentID_gte?: Maybe<ID_Input>;
  CommentID_contains?: Maybe<ID_Input>;
  CommentID_not_contains?: Maybe<ID_Input>;
  CommentID_starts_with?: Maybe<ID_Input>;
  CommentID_not_starts_with?: Maybe<ID_Input>;
  CommentID_ends_with?: Maybe<ID_Input>;
  CommentID_not_ends_with?: Maybe<ID_Input>;
  authorId?: Maybe<ID_Input>;
  authorId_not?: Maybe<ID_Input>;
  authorId_in?: Maybe<ID_Input[] | ID_Input>;
  authorId_not_in?: Maybe<ID_Input[] | ID_Input>;
  authorId_lt?: Maybe<ID_Input>;
  authorId_lte?: Maybe<ID_Input>;
  authorId_gt?: Maybe<ID_Input>;
  authorId_gte?: Maybe<ID_Input>;
  authorId_contains?: Maybe<ID_Input>;
  authorId_not_contains?: Maybe<ID_Input>;
  authorId_starts_with?: Maybe<ID_Input>;
  authorId_not_starts_with?: Maybe<ID_Input>;
  authorId_ends_with?: Maybe<ID_Input>;
  authorId_not_ends_with?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  locationId_not?: Maybe<ID_Input>;
  locationId_in?: Maybe<ID_Input[] | ID_Input>;
  locationId_not_in?: Maybe<ID_Input[] | ID_Input>;
  locationId_lt?: Maybe<ID_Input>;
  locationId_lte?: Maybe<ID_Input>;
  locationId_gt?: Maybe<ID_Input>;
  locationId_gte?: Maybe<ID_Input>;
  locationId_contains?: Maybe<ID_Input>;
  locationId_not_contains?: Maybe<ID_Input>;
  locationId_starts_with?: Maybe<ID_Input>;
  locationId_not_starts_with?: Maybe<ID_Input>;
  locationId_ends_with?: Maybe<ID_Input>;
  locationId_not_ends_with?: Maybe<ID_Input>;
  Context?: Maybe<String>;
  Context_not?: Maybe<String>;
  Context_in?: Maybe<String[] | String>;
  Context_not_in?: Maybe<String[] | String>;
  Context_lt?: Maybe<String>;
  Context_lte?: Maybe<String>;
  Context_gt?: Maybe<String>;
  Context_gte?: Maybe<String>;
  Context_contains?: Maybe<String>;
  Context_not_contains?: Maybe<String>;
  Context_starts_with?: Maybe<String>;
  Context_not_starts_with?: Maybe<String>;
  Context_ends_with?: Maybe<String>;
  Context_not_ends_with?: Maybe<String>;
  Likes_every?: Maybe<LikeWhereInput>;
  Likes_some?: Maybe<LikeWhereInput>;
  Likes_none?: Maybe<LikeWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  User?: Maybe<UserWhereInput>;
  Location?: Maybe<LocationWhereInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface LocationCreateOneWithoutCommentsInput {
  create?: Maybe<LocationCreateWithoutCommentsInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface LocationWhereInput {
  LocationID?: Maybe<ID_Input>;
  LocationID_not?: Maybe<ID_Input>;
  LocationID_in?: Maybe<ID_Input[] | ID_Input>;
  LocationID_not_in?: Maybe<ID_Input[] | ID_Input>;
  LocationID_lt?: Maybe<ID_Input>;
  LocationID_lte?: Maybe<ID_Input>;
  LocationID_gt?: Maybe<ID_Input>;
  LocationID_gte?: Maybe<ID_Input>;
  LocationID_contains?: Maybe<ID_Input>;
  LocationID_not_contains?: Maybe<ID_Input>;
  LocationID_starts_with?: Maybe<ID_Input>;
  LocationID_not_starts_with?: Maybe<ID_Input>;
  LocationID_ends_with?: Maybe<ID_Input>;
  LocationID_not_ends_with?: Maybe<ID_Input>;
  Name?: Maybe<String>;
  Name_not?: Maybe<String>;
  Name_in?: Maybe<String[] | String>;
  Name_not_in?: Maybe<String[] | String>;
  Name_lt?: Maybe<String>;
  Name_lte?: Maybe<String>;
  Name_gt?: Maybe<String>;
  Name_gte?: Maybe<String>;
  Name_contains?: Maybe<String>;
  Name_not_contains?: Maybe<String>;
  Name_starts_with?: Maybe<String>;
  Name_not_starts_with?: Maybe<String>;
  Name_ends_with?: Maybe<String>;
  Name_not_ends_with?: Maybe<String>;
  Description?: Maybe<String>;
  Description_not?: Maybe<String>;
  Description_in?: Maybe<String[] | String>;
  Description_not_in?: Maybe<String[] | String>;
  Description_lt?: Maybe<String>;
  Description_lte?: Maybe<String>;
  Description_gt?: Maybe<String>;
  Description_gte?: Maybe<String>;
  Description_contains?: Maybe<String>;
  Description_not_contains?: Maybe<String>;
  Description_starts_with?: Maybe<String>;
  Description_not_starts_with?: Maybe<String>;
  Description_ends_with?: Maybe<String>;
  Description_not_ends_with?: Maybe<String>;
  Adress?: Maybe<String>;
  Adress_not?: Maybe<String>;
  Adress_in?: Maybe<String[] | String>;
  Adress_not_in?: Maybe<String[] | String>;
  Adress_lt?: Maybe<String>;
  Adress_lte?: Maybe<String>;
  Adress_gt?: Maybe<String>;
  Adress_gte?: Maybe<String>;
  Adress_contains?: Maybe<String>;
  Adress_not_contains?: Maybe<String>;
  Adress_starts_with?: Maybe<String>;
  Adress_not_starts_with?: Maybe<String>;
  Adress_ends_with?: Maybe<String>;
  Adress_not_ends_with?: Maybe<String>;
  Comments_every?: Maybe<CommentWhereInput>;
  Comments_some?: Maybe<CommentWhereInput>;
  Comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface LocationCreateWithoutCommentsInput {
  LocationID?: Maybe<ID_Input>;
  Name: String;
  Description: String;
  Medias?: Maybe<LocationCreateMediasInput>;
  Rates?: Maybe<LocationCreateRatesInput>;
  Adress: String;
}

export interface LikeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LikeWhereInput>;
  AND?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  OR?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
  NOT?: Maybe<LikeSubscriptionWhereInput[] | LikeSubscriptionWhereInput>;
}

export interface LocationCreateMediasInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdateManyMutationInput {
  Login?: Maybe<String>;
  Password?: Maybe<String>;
  Phone?: Maybe<String>;
  Mail?: Maybe<String>;
}

export interface LocationCreateRatesInput {
  set?: Maybe<Float[] | Float>;
}

export interface CommentUpdateWithoutUserDataInput {
  authorId?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  Context?: Maybe<String>;
  Likes?: Maybe<LikeUpdateManyInput>;
  Medias?: Maybe<CommentUpdateMediasInput>;
  Location?: Maybe<LocationUpdateOneRequiredWithoutCommentsInput>;
}

export interface CommentUpdateInput {
  authorId?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  Context?: Maybe<String>;
  Likes?: Maybe<LikeUpdateManyInput>;
  Medias?: Maybe<CommentUpdateMediasInput>;
  User?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
  Location?: Maybe<LocationUpdateOneRequiredWithoutCommentsInput>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface LikeUpdateManyInput {
  create?: Maybe<LikeCreateInput[] | LikeCreateInput>;
  update?: Maybe<
    | LikeUpdateWithWhereUniqueNestedInput[]
    | LikeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | LikeUpsertWithWhereUniqueNestedInput[]
    | LikeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  set?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  disconnect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
  deleteMany?: Maybe<LikeScalarWhereInput[] | LikeScalarWhereInput>;
  updateMany?: Maybe<
    LikeUpdateManyWithWhereNestedInput[] | LikeUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateInput {
  Login?: Maybe<String>;
  Password?: Maybe<String>;
  Phone?: Maybe<String>;
  Mail?: Maybe<String>;
  Comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  Likes?: Maybe<LikeUpdateManyInput>;
}

export interface LikeUpdateWithWhereUniqueNestedInput {
  where: LikeWhereUniqueInput;
  data: LikeUpdateDataInput;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface LikeUpdateDataInput {
  authorId?: Maybe<ID_Input>;
  commentId?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  Type?: Maybe<String>;
}

export interface LikeWhereInput {
  LikeID?: Maybe<ID_Input>;
  LikeID_not?: Maybe<ID_Input>;
  LikeID_in?: Maybe<ID_Input[] | ID_Input>;
  LikeID_not_in?: Maybe<ID_Input[] | ID_Input>;
  LikeID_lt?: Maybe<ID_Input>;
  LikeID_lte?: Maybe<ID_Input>;
  LikeID_gt?: Maybe<ID_Input>;
  LikeID_gte?: Maybe<ID_Input>;
  LikeID_contains?: Maybe<ID_Input>;
  LikeID_not_contains?: Maybe<ID_Input>;
  LikeID_starts_with?: Maybe<ID_Input>;
  LikeID_not_starts_with?: Maybe<ID_Input>;
  LikeID_ends_with?: Maybe<ID_Input>;
  LikeID_not_ends_with?: Maybe<ID_Input>;
  authorId?: Maybe<ID_Input>;
  authorId_not?: Maybe<ID_Input>;
  authorId_in?: Maybe<ID_Input[] | ID_Input>;
  authorId_not_in?: Maybe<ID_Input[] | ID_Input>;
  authorId_lt?: Maybe<ID_Input>;
  authorId_lte?: Maybe<ID_Input>;
  authorId_gt?: Maybe<ID_Input>;
  authorId_gte?: Maybe<ID_Input>;
  authorId_contains?: Maybe<ID_Input>;
  authorId_not_contains?: Maybe<ID_Input>;
  authorId_starts_with?: Maybe<ID_Input>;
  authorId_not_starts_with?: Maybe<ID_Input>;
  authorId_ends_with?: Maybe<ID_Input>;
  authorId_not_ends_with?: Maybe<ID_Input>;
  commentId?: Maybe<ID_Input>;
  commentId_not?: Maybe<ID_Input>;
  commentId_in?: Maybe<ID_Input[] | ID_Input>;
  commentId_not_in?: Maybe<ID_Input[] | ID_Input>;
  commentId_lt?: Maybe<ID_Input>;
  commentId_lte?: Maybe<ID_Input>;
  commentId_gt?: Maybe<ID_Input>;
  commentId_gte?: Maybe<ID_Input>;
  commentId_contains?: Maybe<ID_Input>;
  commentId_not_contains?: Maybe<ID_Input>;
  commentId_starts_with?: Maybe<ID_Input>;
  commentId_not_starts_with?: Maybe<ID_Input>;
  commentId_ends_with?: Maybe<ID_Input>;
  commentId_not_ends_with?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  locationId_not?: Maybe<ID_Input>;
  locationId_in?: Maybe<ID_Input[] | ID_Input>;
  locationId_not_in?: Maybe<ID_Input[] | ID_Input>;
  locationId_lt?: Maybe<ID_Input>;
  locationId_lte?: Maybe<ID_Input>;
  locationId_gt?: Maybe<ID_Input>;
  locationId_gte?: Maybe<ID_Input>;
  locationId_contains?: Maybe<ID_Input>;
  locationId_not_contains?: Maybe<ID_Input>;
  locationId_starts_with?: Maybe<ID_Input>;
  locationId_not_starts_with?: Maybe<ID_Input>;
  locationId_ends_with?: Maybe<ID_Input>;
  locationId_not_ends_with?: Maybe<ID_Input>;
  Type?: Maybe<String>;
  Type_not?: Maybe<String>;
  Type_in?: Maybe<String[] | String>;
  Type_not_in?: Maybe<String[] | String>;
  Type_lt?: Maybe<String>;
  Type_lte?: Maybe<String>;
  Type_gt?: Maybe<String>;
  Type_gte?: Maybe<String>;
  Type_contains?: Maybe<String>;
  Type_not_contains?: Maybe<String>;
  Type_starts_with?: Maybe<String>;
  Type_not_starts_with?: Maybe<String>;
  Type_ends_with?: Maybe<String>;
  Type_not_ends_with?: Maybe<String>;
  AND?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  OR?: Maybe<LikeWhereInput[] | LikeWhereInput>;
  NOT?: Maybe<LikeWhereInput[] | LikeWhereInput>;
}

export interface LikeUpsertWithWhereUniqueNestedInput {
  where: LikeWhereUniqueInput;
  update: LikeUpdateDataInput;
  create: LikeCreateInput;
}

export interface LocationUpdateManyMutationInput {
  Name?: Maybe<String>;
  Description?: Maybe<String>;
  Medias?: Maybe<LocationUpdateMediasInput>;
  Rates?: Maybe<LocationUpdateRatesInput>;
  Adress?: Maybe<String>;
}

export interface CommentUpdateWithWhereUniqueWithoutLocationInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutLocationDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  UserID: Maybe<ID_Input>;
  Login?: Maybe<String>;
}>;

export interface LikeUpdateManyWithWhereNestedInput {
  where: LikeScalarWhereInput;
  data: LikeUpdateManyDataInput;
}

export interface CommentScalarWhereInput {
  CommentID?: Maybe<ID_Input>;
  CommentID_not?: Maybe<ID_Input>;
  CommentID_in?: Maybe<ID_Input[] | ID_Input>;
  CommentID_not_in?: Maybe<ID_Input[] | ID_Input>;
  CommentID_lt?: Maybe<ID_Input>;
  CommentID_lte?: Maybe<ID_Input>;
  CommentID_gt?: Maybe<ID_Input>;
  CommentID_gte?: Maybe<ID_Input>;
  CommentID_contains?: Maybe<ID_Input>;
  CommentID_not_contains?: Maybe<ID_Input>;
  CommentID_starts_with?: Maybe<ID_Input>;
  CommentID_not_starts_with?: Maybe<ID_Input>;
  CommentID_ends_with?: Maybe<ID_Input>;
  CommentID_not_ends_with?: Maybe<ID_Input>;
  authorId?: Maybe<ID_Input>;
  authorId_not?: Maybe<ID_Input>;
  authorId_in?: Maybe<ID_Input[] | ID_Input>;
  authorId_not_in?: Maybe<ID_Input[] | ID_Input>;
  authorId_lt?: Maybe<ID_Input>;
  authorId_lte?: Maybe<ID_Input>;
  authorId_gt?: Maybe<ID_Input>;
  authorId_gte?: Maybe<ID_Input>;
  authorId_contains?: Maybe<ID_Input>;
  authorId_not_contains?: Maybe<ID_Input>;
  authorId_starts_with?: Maybe<ID_Input>;
  authorId_not_starts_with?: Maybe<ID_Input>;
  authorId_ends_with?: Maybe<ID_Input>;
  authorId_not_ends_with?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  locationId_not?: Maybe<ID_Input>;
  locationId_in?: Maybe<ID_Input[] | ID_Input>;
  locationId_not_in?: Maybe<ID_Input[] | ID_Input>;
  locationId_lt?: Maybe<ID_Input>;
  locationId_lte?: Maybe<ID_Input>;
  locationId_gt?: Maybe<ID_Input>;
  locationId_gte?: Maybe<ID_Input>;
  locationId_contains?: Maybe<ID_Input>;
  locationId_not_contains?: Maybe<ID_Input>;
  locationId_starts_with?: Maybe<ID_Input>;
  locationId_not_starts_with?: Maybe<ID_Input>;
  locationId_ends_with?: Maybe<ID_Input>;
  locationId_not_ends_with?: Maybe<ID_Input>;
  Context?: Maybe<String>;
  Context_not?: Maybe<String>;
  Context_in?: Maybe<String[] | String>;
  Context_not_in?: Maybe<String[] | String>;
  Context_lt?: Maybe<String>;
  Context_lte?: Maybe<String>;
  Context_gt?: Maybe<String>;
  Context_gte?: Maybe<String>;
  Context_contains?: Maybe<String>;
  Context_not_contains?: Maybe<String>;
  Context_starts_with?: Maybe<String>;
  Context_not_starts_with?: Maybe<String>;
  Context_ends_with?: Maybe<String>;
  Context_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface LikeUpdateManyDataInput {
  authorId?: Maybe<ID_Input>;
  commentId?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  Type?: Maybe<String>;
}

export interface CommentUpdateWithoutLocationDataInput {
  authorId?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  Context?: Maybe<String>;
  Likes?: Maybe<LikeUpdateManyInput>;
  Medias?: Maybe<CommentUpdateMediasInput>;
  User?: Maybe<UserUpdateOneRequiredWithoutCommentsInput>;
}

export interface CommentUpdateManyWithoutLocationInput {
  create?: Maybe<
    CommentCreateWithoutLocationInput[] | CommentCreateWithoutLocationInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutLocationInput[]
    | CommentUpdateWithWhereUniqueWithoutLocationInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutLocationInput[]
    | CommentUpsertWithWhereUniqueWithoutLocationInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentCreateInput {
  CommentID?: Maybe<ID_Input>;
  authorId: ID_Input;
  locationId: ID_Input;
  Context: String;
  Likes?: Maybe<LikeCreateManyInput>;
  Medias?: Maybe<CommentCreateMediasInput>;
  User: UserCreateOneWithoutCommentsInput;
  Location: LocationCreateOneWithoutCommentsInput;
}

export interface UserUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface LikeCreateInput {
  LikeID?: Maybe<ID_Input>;
  authorId: ID_Input;
  commentId: ID_Input;
  locationId: ID_Input;
  Type: String;
}

export interface UserUpdateWithoutCommentsDataInput {
  Login?: Maybe<String>;
  Password?: Maybe<String>;
  Phone?: Maybe<String>;
  Mail?: Maybe<String>;
  Likes?: Maybe<LikeUpdateManyInput>;
}

export interface UserWhereInput {
  UserID?: Maybe<ID_Input>;
  UserID_not?: Maybe<ID_Input>;
  UserID_in?: Maybe<ID_Input[] | ID_Input>;
  UserID_not_in?: Maybe<ID_Input[] | ID_Input>;
  UserID_lt?: Maybe<ID_Input>;
  UserID_lte?: Maybe<ID_Input>;
  UserID_gt?: Maybe<ID_Input>;
  UserID_gte?: Maybe<ID_Input>;
  UserID_contains?: Maybe<ID_Input>;
  UserID_not_contains?: Maybe<ID_Input>;
  UserID_starts_with?: Maybe<ID_Input>;
  UserID_not_starts_with?: Maybe<ID_Input>;
  UserID_ends_with?: Maybe<ID_Input>;
  UserID_not_ends_with?: Maybe<ID_Input>;
  Login?: Maybe<String>;
  Login_not?: Maybe<String>;
  Login_in?: Maybe<String[] | String>;
  Login_not_in?: Maybe<String[] | String>;
  Login_lt?: Maybe<String>;
  Login_lte?: Maybe<String>;
  Login_gt?: Maybe<String>;
  Login_gte?: Maybe<String>;
  Login_contains?: Maybe<String>;
  Login_not_contains?: Maybe<String>;
  Login_starts_with?: Maybe<String>;
  Login_not_starts_with?: Maybe<String>;
  Login_ends_with?: Maybe<String>;
  Login_not_ends_with?: Maybe<String>;
  Password?: Maybe<String>;
  Password_not?: Maybe<String>;
  Password_in?: Maybe<String[] | String>;
  Password_not_in?: Maybe<String[] | String>;
  Password_lt?: Maybe<String>;
  Password_lte?: Maybe<String>;
  Password_gt?: Maybe<String>;
  Password_gte?: Maybe<String>;
  Password_contains?: Maybe<String>;
  Password_not_contains?: Maybe<String>;
  Password_starts_with?: Maybe<String>;
  Password_not_starts_with?: Maybe<String>;
  Password_ends_with?: Maybe<String>;
  Password_not_ends_with?: Maybe<String>;
  Phone?: Maybe<String>;
  Phone_not?: Maybe<String>;
  Phone_in?: Maybe<String[] | String>;
  Phone_not_in?: Maybe<String[] | String>;
  Phone_lt?: Maybe<String>;
  Phone_lte?: Maybe<String>;
  Phone_gt?: Maybe<String>;
  Phone_gte?: Maybe<String>;
  Phone_contains?: Maybe<String>;
  Phone_not_contains?: Maybe<String>;
  Phone_starts_with?: Maybe<String>;
  Phone_not_starts_with?: Maybe<String>;
  Phone_ends_with?: Maybe<String>;
  Phone_not_ends_with?: Maybe<String>;
  Mail?: Maybe<String>;
  Mail_not?: Maybe<String>;
  Mail_in?: Maybe<String[] | String>;
  Mail_not_in?: Maybe<String[] | String>;
  Mail_lt?: Maybe<String>;
  Mail_lte?: Maybe<String>;
  Mail_gt?: Maybe<String>;
  Mail_gte?: Maybe<String>;
  Mail_contains?: Maybe<String>;
  Mail_not_contains?: Maybe<String>;
  Mail_starts_with?: Maybe<String>;
  Mail_not_starts_with?: Maybe<String>;
  Mail_ends_with?: Maybe<String>;
  Mail_not_ends_with?: Maybe<String>;
  Comments_every?: Maybe<CommentWhereInput>;
  Comments_some?: Maybe<CommentWhereInput>;
  Comments_none?: Maybe<CommentWhereInput>;
  Likes_every?: Maybe<LikeWhereInput>;
  Likes_some?: Maybe<LikeWhereInput>;
  Likes_none?: Maybe<LikeWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface LocationUpdateOneRequiredWithoutCommentsInput {
  create?: Maybe<LocationCreateWithoutCommentsInput>;
  update?: Maybe<LocationUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<LocationUpsertWithoutCommentsInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface LocationUpdateWithoutCommentsDataInput {
  Name?: Maybe<String>;
  Description?: Maybe<String>;
  Medias?: Maybe<LocationUpdateMediasInput>;
  Rates?: Maybe<LocationUpdateRatesInput>;
  Adress?: Maybe<String>;
}

export interface CommentCreateWithoutUserInput {
  CommentID?: Maybe<ID_Input>;
  authorId: ID_Input;
  locationId: ID_Input;
  Context: String;
  Likes?: Maybe<LikeCreateManyInput>;
  Medias?: Maybe<CommentCreateMediasInput>;
  Location: LocationCreateOneWithoutCommentsInput;
}

export interface LocationUpdateMediasInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateInput {
  UserID?: Maybe<ID_Input>;
  Login: String;
  Password: String;
  Phone: String;
  Mail: String;
  Comments?: Maybe<CommentCreateManyWithoutUserInput>;
  Likes?: Maybe<LikeCreateManyInput>;
}

export interface LocationUpdateRatesInput {
  set?: Maybe<Float[] | Float>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface LocationUpsertWithoutCommentsInput {
  update: LocationUpdateWithoutCommentsDataInput;
  create: LocationCreateWithoutCommentsInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface CommentUpdateManyMutationInput {
  authorId?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  Context?: Maybe<String>;
  Medias?: Maybe<CommentUpdateMediasInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface LocationUpdateInput {
  Name?: Maybe<String>;
  Description?: Maybe<String>;
  Medias?: Maybe<LocationUpdateMediasInput>;
  Rates?: Maybe<LocationUpdateRatesInput>;
  Adress?: Maybe<String>;
  Comments?: Maybe<CommentUpdateManyWithoutLocationInput>;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  LocationID: Maybe<ID_Input>;
  Name?: Maybe<String>;
  Adress?: Maybe<String>;
}>;

export interface LocationCreateInput {
  LocationID?: Maybe<ID_Input>;
  Name: String;
  Description: String;
  Medias?: Maybe<LocationCreateMediasInput>;
  Rates?: Maybe<LocationCreateRatesInput>;
  Adress: String;
  Comments?: Maybe<CommentCreateManyWithoutLocationInput>;
}

export interface LikeUpdateManyMutationInput {
  authorId?: Maybe<ID_Input>;
  commentId?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  Type?: Maybe<String>;
}

export interface LikeUpdateInput {
  authorId?: Maybe<ID_Input>;
  commentId?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  Type?: Maybe<String>;
}

export interface CommentCreateWithoutLocationInput {
  CommentID?: Maybe<ID_Input>;
  authorId: ID_Input;
  locationId: ID_Input;
  Context: String;
  Likes?: Maybe<LikeCreateManyInput>;
  Medias?: Maybe<CommentCreateMediasInput>;
  User: UserCreateOneWithoutCommentsInput;
}

export interface CommentUpdateManyDataInput {
  authorId?: Maybe<ID_Input>;
  locationId?: Maybe<ID_Input>;
  Context?: Maybe<String>;
  Medias?: Maybe<CommentUpdateMediasInput>;
}

export type LikeWhereUniqueInput = AtLeastOne<{
  LikeID: Maybe<ID_Input>;
}>;

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface LikeCreateManyInput {
  create?: Maybe<LikeCreateInput[] | LikeCreateInput>;
  connect?: Maybe<LikeWhereUniqueInput[] | LikeWhereUniqueInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutLocationInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutLocationDataInput;
  create: CommentCreateWithoutLocationInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  UserID: ID_Output;
  Login: String;
  Password: String;
  Phone: String;
  Mail: String;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  UserID: () => Promise<ID_Output>;
  Login: () => Promise<String>;
  Password: () => Promise<String>;
  Phone: () => Promise<String>;
  Mail: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  UserID: () => Promise<AsyncIterator<ID_Output>>;
  Login: () => Promise<AsyncIterator<String>>;
  Password: () => Promise<AsyncIterator<String>>;
  Phone: () => Promise<AsyncIterator<String>>;
  Mail: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LikeConnection {
  pageInfo: PageInfo;
  edges: LikeEdge[];
}

export interface LikeConnectionPromise
  extends Promise<LikeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LikeEdge>>() => T;
  aggregate: <T = AggregateLikePromise>() => T;
}

export interface LikeConnectionSubscription
  extends Promise<AsyncIterator<LikeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LikeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLikeSubscription>() => T;
}

export interface LikePreviousValues {
  LikeID: ID_Output;
  authorId: ID_Output;
  commentId: ID_Output;
  locationId: ID_Output;
  Type: String;
}

export interface LikePreviousValuesPromise
  extends Promise<LikePreviousValues>,
    Fragmentable {
  LikeID: () => Promise<ID_Output>;
  authorId: () => Promise<ID_Output>;
  commentId: () => Promise<ID_Output>;
  locationId: () => Promise<ID_Output>;
  Type: () => Promise<String>;
}

export interface LikePreviousValuesSubscription
  extends Promise<AsyncIterator<LikePreviousValues>>,
    Fragmentable {
  LikeID: () => Promise<AsyncIterator<ID_Output>>;
  authorId: () => Promise<AsyncIterator<ID_Output>>;
  commentId: () => Promise<AsyncIterator<ID_Output>>;
  locationId: () => Promise<AsyncIterator<ID_Output>>;
  Type: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Like {
  LikeID: ID_Output;
  authorId: ID_Output;
  commentId: ID_Output;
  locationId: ID_Output;
  Type: String;
}

export interface LikePromise extends Promise<Like>, Fragmentable {
  LikeID: () => Promise<ID_Output>;
  authorId: () => Promise<ID_Output>;
  commentId: () => Promise<ID_Output>;
  locationId: () => Promise<ID_Output>;
  Type: () => Promise<String>;
}

export interface LikeSubscription
  extends Promise<AsyncIterator<Like>>,
    Fragmentable {
  LikeID: () => Promise<AsyncIterator<ID_Output>>;
  authorId: () => Promise<AsyncIterator<ID_Output>>;
  commentId: () => Promise<AsyncIterator<ID_Output>>;
  locationId: () => Promise<AsyncIterator<ID_Output>>;
  Type: () => Promise<AsyncIterator<String>>;
}

export interface LikeNullablePromise
  extends Promise<Like | null>,
    Fragmentable {
  LikeID: () => Promise<ID_Output>;
  authorId: () => Promise<ID_Output>;
  commentId: () => Promise<ID_Output>;
  locationId: () => Promise<ID_Output>;
  Type: () => Promise<String>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  UserID: ID_Output;
  Login: String;
  Password: String;
  Phone: String;
  Mail: String;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  UserID: () => Promise<ID_Output>;
  Login: () => Promise<String>;
  Password: () => Promise<String>;
  Phone: () => Promise<String>;
  Mail: () => Promise<String>;
  Comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  UserID: () => Promise<AsyncIterator<ID_Output>>;
  Login: () => Promise<AsyncIterator<String>>;
  Password: () => Promise<AsyncIterator<String>>;
  Phone: () => Promise<AsyncIterator<String>>;
  Mail: () => Promise<AsyncIterator<String>>;
  Comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  UserID: () => Promise<ID_Output>;
  Login: () => Promise<String>;
  Password: () => Promise<String>;
  Phone: () => Promise<String>;
  Mail: () => Promise<String>;
  Comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationPreviousValues {
  LocationID: ID_Output;
  Name: String;
  Description: String;
  Medias: String[];
  Rates: Float[];
  Adress: String;
  createdAt: DateTimeOutput;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  LocationID: () => Promise<ID_Output>;
  Name: () => Promise<String>;
  Description: () => Promise<String>;
  Medias: () => Promise<String[]>;
  Rates: () => Promise<Float[]>;
  Adress: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  LocationID: () => Promise<AsyncIterator<ID_Output>>;
  Name: () => Promise<AsyncIterator<String>>;
  Description: () => Promise<AsyncIterator<String>>;
  Medias: () => Promise<AsyncIterator<String[]>>;
  Rates: () => Promise<AsyncIterator<Float[]>>;
  Adress: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface AggregateLike {
  count: Int;
}

export interface AggregateLikePromise
  extends Promise<AggregateLike>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLikeSubscription
  extends Promise<AsyncIterator<AggregateLike>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Comment {
  CommentID: ID_Output;
  authorId: ID_Output;
  locationId: ID_Output;
  Context: String;
  Medias: String[];
  createdAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  CommentID: () => Promise<ID_Output>;
  authorId: () => Promise<ID_Output>;
  locationId: () => Promise<ID_Output>;
  Context: () => Promise<String>;
  Likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Medias: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  User: <T = UserPromise>() => T;
  Location: <T = LocationPromise>() => T;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  CommentID: () => Promise<AsyncIterator<ID_Output>>;
  authorId: () => Promise<AsyncIterator<ID_Output>>;
  locationId: () => Promise<AsyncIterator<ID_Output>>;
  Context: () => Promise<AsyncIterator<String>>;
  Likes: <T = Promise<AsyncIterator<LikeSubscription>>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Medias: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  User: <T = UserSubscription>() => T;
  Location: <T = LocationSubscription>() => T;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  CommentID: () => Promise<ID_Output>;
  authorId: () => Promise<ID_Output>;
  locationId: () => Promise<ID_Output>;
  Context: () => Promise<String>;
  Likes: <T = FragmentableArray<Like>>(args?: {
    where?: LikeWhereInput;
    orderBy?: LikeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Medias: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  User: <T = UserPromise>() => T;
  Location: <T = LocationPromise>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface LikeSubscriptionPayload {
  mutation: MutationType;
  node: Like;
  updatedFields: String[];
  previousValues: LikePreviousValues;
}

export interface LikeSubscriptionPayloadPromise
  extends Promise<LikeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LikePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LikePreviousValuesPromise>() => T;
}

export interface LikeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LikeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LikeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LikePreviousValuesSubscription>() => T;
}

export interface Location {
  LocationID: ID_Output;
  Name: String;
  Description: String;
  Medias: String[];
  Rates: Float[];
  Adress: String;
  createdAt: DateTimeOutput;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  LocationID: () => Promise<ID_Output>;
  Name: () => Promise<String>;
  Description: () => Promise<String>;
  Medias: () => Promise<String[]>;
  Rates: () => Promise<Float[]>;
  Adress: () => Promise<String>;
  Comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  LocationID: () => Promise<AsyncIterator<ID_Output>>;
  Name: () => Promise<AsyncIterator<String>>;
  Description: () => Promise<AsyncIterator<String>>;
  Medias: () => Promise<AsyncIterator<String[]>>;
  Rates: () => Promise<AsyncIterator<Float[]>>;
  Adress: () => Promise<AsyncIterator<String>>;
  Comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  LocationID: () => Promise<ID_Output>;
  Name: () => Promise<String>;
  Description: () => Promise<String>;
  Medias: () => Promise<String[]>;
  Rates: () => Promise<Float[]>;
  Adress: () => Promise<String>;
  Comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValues {
  CommentID: ID_Output;
  authorId: ID_Output;
  locationId: ID_Output;
  Context: String;
  Medias: String[];
  createdAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  CommentID: () => Promise<ID_Output>;
  authorId: () => Promise<ID_Output>;
  locationId: () => Promise<ID_Output>;
  Context: () => Promise<String>;
  Medias: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  CommentID: () => Promise<AsyncIterator<ID_Output>>;
  authorId: () => Promise<AsyncIterator<ID_Output>>;
  locationId: () => Promise<AsyncIterator<ID_Output>>;
  Context: () => Promise<AsyncIterator<String>>;
  Medias: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LikeEdge {
  node: Like;
  cursor: String;
}

export interface LikeEdgePromise extends Promise<LikeEdge>, Fragmentable {
  node: <T = LikePromise>() => T;
  cursor: () => Promise<String>;
}

export interface LikeEdgeSubscription
  extends Promise<AsyncIterator<LikeEdge>>,
    Fragmentable {
  node: <T = LikeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Like",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
