module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateComment {
  count: Int!
}

type AggregateLike {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  CommentID: ID!
  authorId: ID!
  locationId: ID!
  Context: String!
  Likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  Medias: [String!]!
  createdAt: DateTime!
  User: User!
  Location: Location!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  CommentID: ID
  authorId: ID!
  locationId: ID!
  Context: String!
  Likes: LikeCreateManyInput
  Medias: CommentCreateMediasInput
  User: UserCreateOneWithoutCommentsInput!
  Location: LocationCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutLocationInput {
  create: [CommentCreateWithoutLocationInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateMediasInput {
  set: [String!]
}

input CommentCreateWithoutLocationInput {
  CommentID: ID
  authorId: ID!
  locationId: ID!
  Context: String!
  Likes: LikeCreateManyInput
  Medias: CommentCreateMediasInput
  User: UserCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutUserInput {
  CommentID: ID
  authorId: ID!
  locationId: ID!
  Context: String!
  Likes: LikeCreateManyInput
  Medias: CommentCreateMediasInput
  Location: LocationCreateOneWithoutCommentsInput!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  CommentID_ASC
  CommentID_DESC
  authorId_ASC
  authorId_DESC
  locationId_ASC
  locationId_DESC
  Context_ASC
  Context_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  CommentID: ID!
  authorId: ID!
  locationId: ID!
  Context: String!
  Medias: [String!]!
  createdAt: DateTime!
}

input CommentScalarWhereInput {
  CommentID: ID
  CommentID_not: ID
  CommentID_in: [ID!]
  CommentID_not_in: [ID!]
  CommentID_lt: ID
  CommentID_lte: ID
  CommentID_gt: ID
  CommentID_gte: ID
  CommentID_contains: ID
  CommentID_not_contains: ID
  CommentID_starts_with: ID
  CommentID_not_starts_with: ID
  CommentID_ends_with: ID
  CommentID_not_ends_with: ID
  authorId: ID
  authorId_not: ID
  authorId_in: [ID!]
  authorId_not_in: [ID!]
  authorId_lt: ID
  authorId_lte: ID
  authorId_gt: ID
  authorId_gte: ID
  authorId_contains: ID
  authorId_not_contains: ID
  authorId_starts_with: ID
  authorId_not_starts_with: ID
  authorId_ends_with: ID
  authorId_not_ends_with: ID
  locationId: ID
  locationId_not: ID
  locationId_in: [ID!]
  locationId_not_in: [ID!]
  locationId_lt: ID
  locationId_lte: ID
  locationId_gt: ID
  locationId_gte: ID
  locationId_contains: ID
  locationId_not_contains: ID
  locationId_starts_with: ID
  locationId_not_starts_with: ID
  locationId_ends_with: ID
  locationId_not_ends_with: ID
  Context: String
  Context_not: String
  Context_in: [String!]
  Context_not_in: [String!]
  Context_lt: String
  Context_lte: String
  Context_gt: String
  Context_gte: String
  Context_contains: String
  Context_not_contains: String
  Context_starts_with: String
  Context_not_starts_with: String
  Context_ends_with: String
  Context_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  authorId: ID
  locationId: ID
  Context: String
  Likes: LikeUpdateManyInput
  Medias: CommentUpdateMediasInput
  User: UserUpdateOneRequiredWithoutCommentsInput
  Location: LocationUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyDataInput {
  authorId: ID
  locationId: ID
  Context: String
  Medias: CommentUpdateMediasInput
}

input CommentUpdateManyMutationInput {
  authorId: ID
  locationId: ID
  Context: String
  Medias: CommentUpdateMediasInput
}

input CommentUpdateManyWithoutLocationInput {
  create: [CommentCreateWithoutLocationInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutLocationInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutLocationInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateMediasInput {
  set: [String!]
}

input CommentUpdateWithoutLocationDataInput {
  authorId: ID
  locationId: ID
  Context: String
  Likes: LikeUpdateManyInput
  Medias: CommentUpdateMediasInput
  User: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutUserDataInput {
  authorId: ID
  locationId: ID
  Context: String
  Likes: LikeUpdateManyInput
  Medias: CommentUpdateMediasInput
  Location: LocationUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutLocationInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutLocationDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithWhereUniqueWithoutLocationInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutLocationDataInput!
  create: CommentCreateWithoutLocationInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  CommentID: ID
  CommentID_not: ID
  CommentID_in: [ID!]
  CommentID_not_in: [ID!]
  CommentID_lt: ID
  CommentID_lte: ID
  CommentID_gt: ID
  CommentID_gte: ID
  CommentID_contains: ID
  CommentID_not_contains: ID
  CommentID_starts_with: ID
  CommentID_not_starts_with: ID
  CommentID_ends_with: ID
  CommentID_not_ends_with: ID
  authorId: ID
  authorId_not: ID
  authorId_in: [ID!]
  authorId_not_in: [ID!]
  authorId_lt: ID
  authorId_lte: ID
  authorId_gt: ID
  authorId_gte: ID
  authorId_contains: ID
  authorId_not_contains: ID
  authorId_starts_with: ID
  authorId_not_starts_with: ID
  authorId_ends_with: ID
  authorId_not_ends_with: ID
  locationId: ID
  locationId_not: ID
  locationId_in: [ID!]
  locationId_not_in: [ID!]
  locationId_lt: ID
  locationId_lte: ID
  locationId_gt: ID
  locationId_gte: ID
  locationId_contains: ID
  locationId_not_contains: ID
  locationId_starts_with: ID
  locationId_not_starts_with: ID
  locationId_ends_with: ID
  locationId_not_ends_with: ID
  Context: String
  Context_not: String
  Context_in: [String!]
  Context_not_in: [String!]
  Context_lt: String
  Context_lte: String
  Context_gt: String
  Context_gte: String
  Context_contains: String
  Context_not_contains: String
  Context_starts_with: String
  Context_not_starts_with: String
  Context_ends_with: String
  Context_not_ends_with: String
  Likes_every: LikeWhereInput
  Likes_some: LikeWhereInput
  Likes_none: LikeWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  User: UserWhereInput
  Location: LocationWhereInput
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  CommentID: ID
}

scalar DateTime

type Like {
  LikeID: ID!
  authorId: ID!
  commentId: ID!
  locationId: ID!
  Type: String!
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge]!
  aggregate: AggregateLike!
}

input LikeCreateInput {
  LikeID: ID
  authorId: ID!
  commentId: ID!
  locationId: ID!
  Type: String!
}

input LikeCreateManyInput {
  create: [LikeCreateInput!]
  connect: [LikeWhereUniqueInput!]
}

type LikeEdge {
  node: Like!
  cursor: String!
}

enum LikeOrderByInput {
  LikeID_ASC
  LikeID_DESC
  authorId_ASC
  authorId_DESC
  commentId_ASC
  commentId_DESC
  locationId_ASC
  locationId_DESC
  Type_ASC
  Type_DESC
}

type LikePreviousValues {
  LikeID: ID!
  authorId: ID!
  commentId: ID!
  locationId: ID!
  Type: String!
}

input LikeScalarWhereInput {
  LikeID: ID
  LikeID_not: ID
  LikeID_in: [ID!]
  LikeID_not_in: [ID!]
  LikeID_lt: ID
  LikeID_lte: ID
  LikeID_gt: ID
  LikeID_gte: ID
  LikeID_contains: ID
  LikeID_not_contains: ID
  LikeID_starts_with: ID
  LikeID_not_starts_with: ID
  LikeID_ends_with: ID
  LikeID_not_ends_with: ID
  authorId: ID
  authorId_not: ID
  authorId_in: [ID!]
  authorId_not_in: [ID!]
  authorId_lt: ID
  authorId_lte: ID
  authorId_gt: ID
  authorId_gte: ID
  authorId_contains: ID
  authorId_not_contains: ID
  authorId_starts_with: ID
  authorId_not_starts_with: ID
  authorId_ends_with: ID
  authorId_not_ends_with: ID
  commentId: ID
  commentId_not: ID
  commentId_in: [ID!]
  commentId_not_in: [ID!]
  commentId_lt: ID
  commentId_lte: ID
  commentId_gt: ID
  commentId_gte: ID
  commentId_contains: ID
  commentId_not_contains: ID
  commentId_starts_with: ID
  commentId_not_starts_with: ID
  commentId_ends_with: ID
  commentId_not_ends_with: ID
  locationId: ID
  locationId_not: ID
  locationId_in: [ID!]
  locationId_not_in: [ID!]
  locationId_lt: ID
  locationId_lte: ID
  locationId_gt: ID
  locationId_gte: ID
  locationId_contains: ID
  locationId_not_contains: ID
  locationId_starts_with: ID
  locationId_not_starts_with: ID
  locationId_ends_with: ID
  locationId_not_ends_with: ID
  Type: String
  Type_not: String
  Type_in: [String!]
  Type_not_in: [String!]
  Type_lt: String
  Type_lte: String
  Type_gt: String
  Type_gte: String
  Type_contains: String
  Type_not_contains: String
  Type_starts_with: String
  Type_not_starts_with: String
  Type_ends_with: String
  Type_not_ends_with: String
  AND: [LikeScalarWhereInput!]
  OR: [LikeScalarWhereInput!]
  NOT: [LikeScalarWhereInput!]
}

type LikeSubscriptionPayload {
  mutation: MutationType!
  node: Like
  updatedFields: [String!]
  previousValues: LikePreviousValues
}

input LikeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LikeWhereInput
  AND: [LikeSubscriptionWhereInput!]
  OR: [LikeSubscriptionWhereInput!]
  NOT: [LikeSubscriptionWhereInput!]
}

input LikeUpdateDataInput {
  authorId: ID
  commentId: ID
  locationId: ID
  Type: String
}

input LikeUpdateInput {
  authorId: ID
  commentId: ID
  locationId: ID
  Type: String
}

input LikeUpdateManyDataInput {
  authorId: ID
  commentId: ID
  locationId: ID
  Type: String
}

input LikeUpdateManyInput {
  create: [LikeCreateInput!]
  update: [LikeUpdateWithWhereUniqueNestedInput!]
  upsert: [LikeUpsertWithWhereUniqueNestedInput!]
  delete: [LikeWhereUniqueInput!]
  connect: [LikeWhereUniqueInput!]
  set: [LikeWhereUniqueInput!]
  disconnect: [LikeWhereUniqueInput!]
  deleteMany: [LikeScalarWhereInput!]
  updateMany: [LikeUpdateManyWithWhereNestedInput!]
}

input LikeUpdateManyMutationInput {
  authorId: ID
  commentId: ID
  locationId: ID
  Type: String
}

input LikeUpdateManyWithWhereNestedInput {
  where: LikeScalarWhereInput!
  data: LikeUpdateManyDataInput!
}

input LikeUpdateWithWhereUniqueNestedInput {
  where: LikeWhereUniqueInput!
  data: LikeUpdateDataInput!
}

input LikeUpsertWithWhereUniqueNestedInput {
  where: LikeWhereUniqueInput!
  update: LikeUpdateDataInput!
  create: LikeCreateInput!
}

input LikeWhereInput {
  LikeID: ID
  LikeID_not: ID
  LikeID_in: [ID!]
  LikeID_not_in: [ID!]
  LikeID_lt: ID
  LikeID_lte: ID
  LikeID_gt: ID
  LikeID_gte: ID
  LikeID_contains: ID
  LikeID_not_contains: ID
  LikeID_starts_with: ID
  LikeID_not_starts_with: ID
  LikeID_ends_with: ID
  LikeID_not_ends_with: ID
  authorId: ID
  authorId_not: ID
  authorId_in: [ID!]
  authorId_not_in: [ID!]
  authorId_lt: ID
  authorId_lte: ID
  authorId_gt: ID
  authorId_gte: ID
  authorId_contains: ID
  authorId_not_contains: ID
  authorId_starts_with: ID
  authorId_not_starts_with: ID
  authorId_ends_with: ID
  authorId_not_ends_with: ID
  commentId: ID
  commentId_not: ID
  commentId_in: [ID!]
  commentId_not_in: [ID!]
  commentId_lt: ID
  commentId_lte: ID
  commentId_gt: ID
  commentId_gte: ID
  commentId_contains: ID
  commentId_not_contains: ID
  commentId_starts_with: ID
  commentId_not_starts_with: ID
  commentId_ends_with: ID
  commentId_not_ends_with: ID
  locationId: ID
  locationId_not: ID
  locationId_in: [ID!]
  locationId_not_in: [ID!]
  locationId_lt: ID
  locationId_lte: ID
  locationId_gt: ID
  locationId_gte: ID
  locationId_contains: ID
  locationId_not_contains: ID
  locationId_starts_with: ID
  locationId_not_starts_with: ID
  locationId_ends_with: ID
  locationId_not_ends_with: ID
  Type: String
  Type_not: String
  Type_in: [String!]
  Type_not_in: [String!]
  Type_lt: String
  Type_lte: String
  Type_gt: String
  Type_gte: String
  Type_contains: String
  Type_not_contains: String
  Type_starts_with: String
  Type_not_starts_with: String
  Type_ends_with: String
  Type_not_ends_with: String
  AND: [LikeWhereInput!]
  OR: [LikeWhereInput!]
  NOT: [LikeWhereInput!]
}

input LikeWhereUniqueInput {
  LikeID: ID
}

type Location {
  LocationID: ID!
  Name: String!
  Description: String!
  Medias: [String!]!
  Rates: [Float!]!
  Adress: String!
  Comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  createdAt: DateTime!
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  LocationID: ID
  Name: String!
  Description: String!
  Medias: LocationCreateMediasInput
  Rates: LocationCreateRatesInput
  Adress: String!
  Comments: CommentCreateManyWithoutLocationInput
}

input LocationCreateMediasInput {
  set: [String!]
}

input LocationCreateOneWithoutCommentsInput {
  create: LocationCreateWithoutCommentsInput
  connect: LocationWhereUniqueInput
}

input LocationCreateRatesInput {
  set: [Float!]
}

input LocationCreateWithoutCommentsInput {
  LocationID: ID
  Name: String!
  Description: String!
  Medias: LocationCreateMediasInput
  Rates: LocationCreateRatesInput
  Adress: String!
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  LocationID_ASC
  LocationID_DESC
  Name_ASC
  Name_DESC
  Description_ASC
  Description_DESC
  Adress_ASC
  Adress_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocationPreviousValues {
  LocationID: ID!
  Name: String!
  Description: String!
  Medias: [String!]!
  Rates: [Float!]!
  Adress: String!
  createdAt: DateTime!
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
  AND: [LocationSubscriptionWhereInput!]
  OR: [LocationSubscriptionWhereInput!]
  NOT: [LocationSubscriptionWhereInput!]
}

input LocationUpdateInput {
  Name: String
  Description: String
  Medias: LocationUpdateMediasInput
  Rates: LocationUpdateRatesInput
  Adress: String
  Comments: CommentUpdateManyWithoutLocationInput
}

input LocationUpdateManyMutationInput {
  Name: String
  Description: String
  Medias: LocationUpdateMediasInput
  Rates: LocationUpdateRatesInput
  Adress: String
}

input LocationUpdateMediasInput {
  set: [String!]
}

input LocationUpdateOneRequiredWithoutCommentsInput {
  create: LocationCreateWithoutCommentsInput
  update: LocationUpdateWithoutCommentsDataInput
  upsert: LocationUpsertWithoutCommentsInput
  connect: LocationWhereUniqueInput
}

input LocationUpdateRatesInput {
  set: [Float!]
}

input LocationUpdateWithoutCommentsDataInput {
  Name: String
  Description: String
  Medias: LocationUpdateMediasInput
  Rates: LocationUpdateRatesInput
  Adress: String
}

input LocationUpsertWithoutCommentsInput {
  update: LocationUpdateWithoutCommentsDataInput!
  create: LocationCreateWithoutCommentsInput!
}

input LocationWhereInput {
  LocationID: ID
  LocationID_not: ID
  LocationID_in: [ID!]
  LocationID_not_in: [ID!]
  LocationID_lt: ID
  LocationID_lte: ID
  LocationID_gt: ID
  LocationID_gte: ID
  LocationID_contains: ID
  LocationID_not_contains: ID
  LocationID_starts_with: ID
  LocationID_not_starts_with: ID
  LocationID_ends_with: ID
  LocationID_not_ends_with: ID
  Name: String
  Name_not: String
  Name_in: [String!]
  Name_not_in: [String!]
  Name_lt: String
  Name_lte: String
  Name_gt: String
  Name_gte: String
  Name_contains: String
  Name_not_contains: String
  Name_starts_with: String
  Name_not_starts_with: String
  Name_ends_with: String
  Name_not_ends_with: String
  Description: String
  Description_not: String
  Description_in: [String!]
  Description_not_in: [String!]
  Description_lt: String
  Description_lte: String
  Description_gt: String
  Description_gte: String
  Description_contains: String
  Description_not_contains: String
  Description_starts_with: String
  Description_not_starts_with: String
  Description_ends_with: String
  Description_not_ends_with: String
  Adress: String
  Adress_not: String
  Adress_in: [String!]
  Adress_not_in: [String!]
  Adress_lt: String
  Adress_lte: String
  Adress_gt: String
  Adress_gte: String
  Adress_contains: String
  Adress_not_contains: String
  Adress_starts_with: String
  Adress_not_starts_with: String
  Adress_ends_with: String
  Adress_not_ends_with: String
  Comments_every: CommentWhereInput
  Comments_some: CommentWhereInput
  Comments_none: CommentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
}

input LocationWhereUniqueInput {
  LocationID: ID
  Name: String
  Adress: String
}

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createLike(data: LikeCreateInput!): Like!
  updateLike(data: LikeUpdateInput!, where: LikeWhereUniqueInput!): Like
  updateManyLikes(data: LikeUpdateManyMutationInput!, where: LikeWhereInput): BatchPayload!
  upsertLike(where: LikeWhereUniqueInput!, create: LikeCreateInput!, update: LikeUpdateInput!): Like!
  deleteLike(where: LikeWhereUniqueInput!): Like
  deleteManyLikes(where: LikeWhereInput): BatchPayload!
  createLocation(data: LocationCreateInput!): Location!
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  like(where: LikeWhereUniqueInput!): Like
  likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like]!
  likesConnection(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikeConnection!
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  like(where: LikeSubscriptionWhereInput): LikeSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  UserID: ID!
  Login: String!
  Password: String!
  Phone: String!
  Mail: String!
  Comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  Likes(where: LikeWhereInput, orderBy: LikeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Like!]
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  UserID: ID
  Login: String!
  Password: String!
  Phone: String!
  Mail: String!
  Comments: CommentCreateManyWithoutUserInput
  Likes: LikeCreateManyInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  UserID: ID
  Login: String!
  Password: String!
  Phone: String!
  Mail: String!
  Likes: LikeCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  UserID_ASC
  UserID_DESC
  Login_ASC
  Login_DESC
  Password_ASC
  Password_DESC
  Phone_ASC
  Phone_DESC
  Mail_ASC
  Mail_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  UserID: ID!
  Login: String!
  Password: String!
  Phone: String!
  Mail: String!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  Login: String
  Password: String
  Phone: String
  Mail: String
  Comments: CommentUpdateManyWithoutUserInput
  Likes: LikeUpdateManyInput
}

input UserUpdateManyMutationInput {
  Login: String
  Password: String
  Phone: String
  Mail: String
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCommentsDataInput {
  Login: String
  Password: String
  Phone: String
  Mail: String
  Likes: LikeUpdateManyInput
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserWhereInput {
  UserID: ID
  UserID_not: ID
  UserID_in: [ID!]
  UserID_not_in: [ID!]
  UserID_lt: ID
  UserID_lte: ID
  UserID_gt: ID
  UserID_gte: ID
  UserID_contains: ID
  UserID_not_contains: ID
  UserID_starts_with: ID
  UserID_not_starts_with: ID
  UserID_ends_with: ID
  UserID_not_ends_with: ID
  Login: String
  Login_not: String
  Login_in: [String!]
  Login_not_in: [String!]
  Login_lt: String
  Login_lte: String
  Login_gt: String
  Login_gte: String
  Login_contains: String
  Login_not_contains: String
  Login_starts_with: String
  Login_not_starts_with: String
  Login_ends_with: String
  Login_not_ends_with: String
  Password: String
  Password_not: String
  Password_in: [String!]
  Password_not_in: [String!]
  Password_lt: String
  Password_lte: String
  Password_gt: String
  Password_gte: String
  Password_contains: String
  Password_not_contains: String
  Password_starts_with: String
  Password_not_starts_with: String
  Password_ends_with: String
  Password_not_ends_with: String
  Phone: String
  Phone_not: String
  Phone_in: [String!]
  Phone_not_in: [String!]
  Phone_lt: String
  Phone_lte: String
  Phone_gt: String
  Phone_gte: String
  Phone_contains: String
  Phone_not_contains: String
  Phone_starts_with: String
  Phone_not_starts_with: String
  Phone_ends_with: String
  Phone_not_ends_with: String
  Mail: String
  Mail_not: String
  Mail_in: [String!]
  Mail_not_in: [String!]
  Mail_lt: String
  Mail_lte: String
  Mail_gt: String
  Mail_gte: String
  Mail_contains: String
  Mail_not_contains: String
  Mail_starts_with: String
  Mail_not_starts_with: String
  Mail_ends_with: String
  Mail_not_ends_with: String
  Comments_every: CommentWhereInput
  Comments_some: CommentWhereInput
  Comments_none: CommentWhereInput
  Likes_every: LikeWhereInput
  Likes_some: LikeWhereInput
  Likes_none: LikeWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  UserID: ID
  Login: String
}
`
      }
    